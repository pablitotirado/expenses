name: Deploy Backend Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - 'packages/shared/**'
      - '.github/workflows/deploy-backend.yml'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install

      - name: Setup Pulumi
        uses: pulumi/setup-pulumi@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Build shared package
        working-directory: packages/shared
        run: pnpm build

      - name: Generate Prisma client
        working-directory: apps/backend
        run: pnpm db:generate

      - name: Build backend
        working-directory: apps/backend
        run: pnpm build

      - name: Deploy infrastructure (includes Docker build and push)
        working-directory: apps/backend/infra
        run: |
          pulumi login s3://pulumi-shared/expenses-backend
          pulumi stack select dev --create 
          pulumi config set expense-manager-backend-infra:environment dev
          pulumi config set --secret openAiApiKey ${{ secrets.OPENAI_API_KEY }}
          pulumi config set --secret dbPassword ${{ secrets.DB_SECRET }}
          pulumi config set --secret jwtSecret ${{ secrets.JWT_SECRET }}
          pulumi up --yes
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Wait for service to be healthy
        working-directory: apps/backend/infra
        run: |
          echo "‚è≥ Waiting for Fargate service to be healthy..."

          SERVICE_NAME=$(pulumi stack output fargateServiceId --show-secrets | sed 's/.*service\///')
          CLUSTER_NAME=$(pulumi stack output fargateClusterId --show-secrets | sed 's/.*cluster\///')

          echo "üîç Monitoring service: $SERVICE_NAME in cluster: $CLUSTER_NAME"

          # Wait for service to be stable
          aws ecs wait services-stable \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_NAME" \
            --region ${{ secrets.AWS_REGION || 'us-east-1' }}

          echo "‚úÖ Service is healthy and stable!"
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Verify health endpoint
        working-directory: apps/backend/infra
        run: |
          echo "üîç Verifying health endpoint..."

          # Get ALB DNS name
          ALB_DNS=$(pulumi stack output albDnsName --show-secrets)

          if [ -n "$ALB_DNS" ]; then
            echo "üåê Service URL: http://$ALB_DNS"
            echo "üîç Health check: http://$ALB_DNS/api/health"

            # Wait a bit more for ALB to be ready
            sleep 30

            # Test health endpoint
            if curl -f "http://$ALB_DNS/api/health"; then
              echo "‚úÖ Health endpoint is responding correctly!"
            else
              echo "‚ö†Ô∏è  Health endpoint not responding, but deployment completed"
            fi
          else
            echo "‚ö†Ô∏è  Could not get ALB DNS name"
          fi
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
